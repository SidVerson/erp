services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_DB: erp_db
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U erp_user -d erp_db" ]
        interval: 5s
        timeout: 5s
        retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
  migrations:
    build:
      context: ../backend
      target: migration
    networks:
        - erp-network
    command: sh -c "npm run migration:run"
    environment:
    - DB_HOST=db
    - DB_PORT=5432
    - DB_USERNAME=erp_user
    - DB_PASSWORD=erp_password
    - DB_DATABASE=erp_db
    depends_on:
    - db
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=erp_user
      - DB_PASSWORD=erp_password
      - DB_DATABASE=erp_db
      - JWT_SECRET=your_jwt_secret
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=admin_password
    depends_on:
      db:
        condition: service_healthy
    networks:
      - erp-network



networks:
  erp-network:
    driver: bridge

volumes:
  postgres_data: